def esempio_script_mr():
  set_tcp(p[0.0,0.0,0.1,0.0,0.0,0.0])
  step_count_6dba4cd0_60a3_44e7_bbf8_bc753997b150 = 0.0
  thread Step_Counter_Thread_0c585929_e9ac_4516_80f1_316a58b3e556():
    while (True):
      step_count_6dba4cd0_60a3_44e7_bbf8_bc753997b150 = step_count_6dba4cd0_60a3_44e7_bbf8_bc753997b150 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_0c585929_e9ac_4516_80f1_316a58b3e556()
  set_safety_mode_transition_hardness(1)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(True, 1000000, 2, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(24)
  set_gravity([-1.2026031567627009E-15, 2.2091461598609163E-31, -9.82])
  set_target_payload(2.000000, [0.000000, 0.000000, 0.000000], [0.004887, 0.004887, 0.004887, 0.000000, 0.000000, 0.000000])
  # begin: URCap Installation Node
  #   Source: External Control, 1.0.5, FZI Research Center for Information Technology
  #   Type: External Control
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: OnRobot, 5.14.3, OnRobot A/S
  #   Type: Impostazione OnRobot
  if (False):
    global tfg_Busy = 0
    global tfg_Diameter = 0
    global tfg_Force_Grip_detected = 0
    global tfg_Grip_detected = 0
  end
  ON_CONN_SHIFT_BOOL = 64
  ON_CONN_SHIFT_INT = 24
  ON_CONN_SHIFT_FLOAT = 24
  ON_CONN_REG_SUM_BOOL = 6
  ON_CONN_REG_SUM_INT = 4
  ON_CONN_REG_SUM_FLOAT = 3
  ON_TOOL_SHIFT_BOOL = 64
  ON_TOOL_SHIFT_INT = 25
  ON_TOOL_SHIFT_FLOAT = 24
  ON_TOOL_SHIFT_BOOL_ARR = [64, 70, 70]
  ON_TOOL_SHIFT_INT_ARR = [25, 28, 28]
  ON_TOOL_SHIFT_FLOAT_ARR = [24, 27, 27]
  ON_TOOL_REG_SUM_BOOL = 6
  ON_TOOL_REG_SUM_INT = 3
  ON_TOOL_REG_SUM_FLOAT = 3
  ON_REGISTERS_SPEEDL_FLOAT = 0
  ON_REG_USE_TOOL = False
  ON_DI_SINGLE = 0
  ON_DI_PRIMARY = 1
  ON_DI_SECONDARY = 2
  ON_DI_DUAL = 3
  on_robot_type = 5
  on_robot_cycle = 2.0
  on_conn_ip = "localhost"
  on_tool_ip = "localhost"
  on_device_socket_port = 51234
  on_conn_xmlrpc = rpc_factory("xmlrpc", "http://localhost:41414")
  on_tool_xmlrpc = rpc_factory("xmlrpc", "http://localhost:41414")
  on_RPC = rpc_factory("xmlrpc", "http://127.0.0.1:31416")
  ON_DEBUG_LOG = False
  on_isMetric = True
  on_toolConnector = True
  on_ioqc = False
  on_dual = False
  on_computebox = False
  on_devices = 1
  on_gripper = [False, False, False]
  on_custom_tcp_id = "none"
  on_custom_tcp_enabled = False
  on_ft = False
  tfg_index = 0
  on_gripper[tfg_index] = True
  #======    OnRobot Globals    ======#
  
  ON_MATH_PI=3.141593
  ON_ZEROPOSE=p[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZEROFRAME=p[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZERO3D=[0.0,0.0,0.0]
  ON_ZERO6D=[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZERO8D=[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
  ON_FALSE3D=[False,False,False]
  ON_FALSE6D=[False,False,False,False,False,False]
  ON_FALSE8D=[False,False,False,False,False,False,False,False]
  global on_return=0
  on_speedL=ON_ZERO6D
  on_speedBase=ON_ZERO6D
  on_speedVect=ON_ZERO6D
  on_speedExtra=ON_ZERO6D
  on_speedCB=ON_ZERO6D
  on_speedGecko=ON_ZERO6D
  on_RTDE_error=0
  on_RTDE_tool_error=0
  on_dataProcess_thrd=0
  ON_DEVICE_ID_MISSING=0
  ON_INIT_WATCHDOG_HZ=5
  ON_INIT_TIMEOUT=500
  on_robot_TCP_offset=ON_ZEROFRAME
  on_tcp_offset_actual=ON_ZEROFRAME
  on_cog_actual=ON_ZEROFRAME
  on_mass_actual=0.0
  on_robot_mount=[0.0,0.0]
  
  #======    End of OnRobot Globals    ======#
  #======    OnRobot TFG Globals    ======#
  
  TFG_DEVICE_ID_TFG15=112
  if ON_DEBUG_LOG:
  textmsg("TFG Dual: False, Index: ",tfg_index)
  if False:
  tfg_index=-1
  end 
  end 
  tfg_Diameter_arr=[0,0,0]
  tfg_device_id_arr=[0,0,0]
  tfg_product_code_arr=[0,0,0]
  tfg_Status_arr=[0,0,0]
  tfg_Grip_detected_arr=[False,False,False]
  tfg_Force_Grip_detected_arr=[False,False,False]
  tfg_Busy_arr=[False,False,False]
  tfg_data_error_arr=[0,0,0]
  tfg_fingertip_arr=[0,0,0]
  tfg_Grip_guard_arr=[False,False,False]
  
  tfg_Diameter=0
  tfg_Busy=False
  tfg_Grip_detected=False
  tfg_Force_Grip_detected=False
  def get_tfg_Diameter():
  return tfg_Diameter
  end 
  def get_tfg_Busy():
  return tfg_Busy
  end 
  def get_tfg_Grip_detected():
  return tfg_Grip_detected
  end 
  def get_tfg_Force_Grip_detected():
  return tfg_Force_Grip_detected
  end 
  
  
  #======    End of OnRobot TFG Globals    ======#
  #======    OnRobot Interface Messages    ======#
  
  on_devices_primary_log="Dispositivi OnRobot"
  on_devices_secondary_log="Dispositivo secondario OnRobot"
  on_program_halted="<br>Programma arrestato."
  on_device_error_title="OnRobot - Errore dispositivo"
  on_install_error="La Configurazione OnRobot non è corretta.<br>Controllare lo stato della pagina Configurazione OnRobot nella scheda installazione.<br>Programma arrestato."
  on_device_missing="Nessun dispositivo collegato.<br>Programma interrotto."
  cb_device_missing="Nessuna Compute Box collegata.<br>Programma interrotto."
  ft_device_missing="Nessun sensore OnRobot FT o licenza rilevata.<br>Programma interrotto."
  hex_device_missing="Nessun sensore HEX collegato.<br>Programma interrotto."
  rg2ft_device_missing="Nessuna pinza RG2-FT collegata.<br>Programma interrotto."
  rg_device_missing="Nessuna pinza RG collegata.<br>Programma interrotto."
  vg_device_missing="Nessuna pinza VG collegata.<br>Programma interrotto."
  gg_device_missing="Nessuna Gecko Gripper collegata.<br>Programma interrotto."
  sg_device_missing="Nessuna Soft Gripper collegata.<br>Programma interrotto."
  tfg_device_missing="Nessuna pinza 3FG collegata.<br>Programma interrotto."
  sdr_device_missing="Nessun sensore OnRobot Sander collegato.<br>Programma interrotto."
  twofg_device_missing="Nessuna pinza 2FG collegata.<br>Programma interrotto."
  vgp_device_missing="Nessuna pinza VGP collegata.<br>Programma interrotto."
  mg_device_missing="Nessuna pinza Magnetica collegata.<br>Programma interrotto."
  fgp_device_missing="Nessuna pinza 2FGP20 collegata.<br>Programma interrotto."
  on_xmlrpc_start_ip="Connessione in corso al server OnRobot XML-RPC:"
  on_java_comm_error_textmsg_title="OnRobot - Errore comunicazione:"
  on_java_comm_controlsocket_open_error="Apertura Socket 'javaSocket' non riuscita."
  on_java_comm_error_title="OnRobot - Errore comunicazione"
  on_java_comm_socket_open_error="Timeout connessione con URCap.<br>Controllare lo stato della pagina Configurazione OnRobot nella scheda installazione.<br>Programma arrestato."
  on_rtde_feed_error_textmsg_title="OnRobot - RTDE errore:"
  on_rtde_feed_error="Errore alimentazione RTDE. Mancata corrispondenza del conteggio dei dispositivi OnRobot.<br>Il programma è stato arrestato."
  on_rtde_feed_tool_error="Errore di alimentazione dell'utensile RTDE. Mancata corrispondenza del conteggio dei dispositivi OnRobot.<br>Il programma è stato arrestato."
  on_rtde_feed_open_error_textmsg="Apertura Socket 'rtdeFeed' non riuscita."
  on_rtde_feed_error_title="OnRobot - RTDE errore"
  on_rtde_feed_count_error="Rilevata impostazione offset RTDE non valida. Controllare gli offset RTDE nella pagina Configurazione di OnRobot nella scheda Installazione.<br>Il programma è stato arrestato fermato."
  on_rtde_feed_open_error="Connessione con i dispositivi in corso.<br>Verificare che i dispositivi OnRobot funzionino, quindi controllare lo stato nella pagina Configurazione OnRobot, nella scheda Installazione."
  
  #======    End of OnRobot Interface Messages    ======#
  #======    OnRobot Interface    ======#
  
  on_portopened_javaSocket=False
  on_rtde_feed_opened=False
  on_dataProcess_running=False
  def on_missing():
  popup(on_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def cb_missing():
  popup(cb_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def ft_missing():
  popup(ft_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def hex_missing():
  popup(hex_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def rg2ft_missing():
  popup(rg2ft_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def rg_missing():
  popup(rg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def vg_missing():
  popup(vg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def gg_missing():
  popup(gg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def sg_missing():
  popup(sg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def tfg_missing():
  popup(tfg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def sdr_missing():
  popup(sdr_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def twofg_missing():
  popup(twofg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def vgp_missing():
  popup(vgp_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def mg_missing():
  popup(mg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def fgp_missing():
  popup(fgp_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def on_portclose_javaSocket():
  socket_close("javaSocket")
  on_portopened_javaSocket=False
  end 
  def on_portopen_javaSocket():
  on_portclose_javaSocket()
  on_portopened_javaSocket=socket_open("127.0.0.1",44005,"javaSocket")
  if not on_portopened_javaSocket:
  textmsg(on_java_comm_error_textmsg_title,on_java_comm_controlsocket_open_error)
  popup(on_java_comm_socket_open_error,title=on_java_comm_error_title,error=True,blocking=False)
  halt
  end 
  end 
  on_conn_rtde_feed_name="rtdeFeedConn"
  on_tool_rtde_feed_name="rtdeFeedTool"
  def on_rtde_feed_close(rtdeFeedName):
  socket_close(rtdeFeedName)
  on_rtde_feed_opened=False
  end 
  def on_rtde_feed_open(deviceIP,rtdeFeedName,regStart,regSum,regSpeedl):
  on_rtde_feed_close(rtdeFeedName)
  if((regStart[0]+regSum[0])>128)or((regStart[1]+regSum[1])>48)or((regStart[2]+regSum[2])>48):
  popup(on_rtde_feed_count_error,title=on_rtde_feed_error_title,error=True,blocking=False)
  textmsg(str_cat("RegStart: ",regStart),str_cat("  -  RegSum: ",regSum))
  halt
  end 
  on_rtde_feed_opened=socket_open(deviceIP,on_device_socket_port,rtdeFeedName)
  if not on_rtde_feed_opened:
  on_rtde_feed_opened=socket_open(deviceIP,on_device_socket_port,rtdeFeedName)
  end 
  if not on_rtde_feed_opened:
  textmsg(on_rtde_feed_error_textmsg_title,on_rtde_feed_open_error_textmsg)
  popup(on_rtde_feed_open_error,title=on_rtde_feed_error_title,error=True,blocking=False)
  halt
  end 
  socket_send_int(regStart[0],rtdeFeedName)
  socket_send_int(regSum[0],rtdeFeedName)
  socket_send_int(regStart[1],rtdeFeedName)
  socket_send_int(regSum[1],rtdeFeedName)
  socket_send_int(regStart[2],rtdeFeedName)
  socket_send_int(regSum[2],rtdeFeedName)
  socket_send_int(regSpeedl,rtdeFeedName)
  socket_send_int(on_devices,rtdeFeedName)
  end 
  def on_dataRead():
  enter_critical
  on_RTDE_error=read_input_integer_register(ON_CONN_SHIFT_INT)
  if(ON_REG_USE_TOOL):
  on_RTDE_tool_error=read_input_integer_register(ON_TOOL_SHIFT_INT_ARR[0])
  end
  exit_critical
  end 
  def on_set_rtde_watchdog(updateHz=ON_INIT_WATCHDOG_HZ):
  local effect="stop"
  if(updateHz<1):
  effect="ignore"
  end 
  watchdog_conn_reg_str=str_cat("input_int_register_",ON_CONN_SHIFT_INT)
  rtde_set_watchdog(watchdog_conn_reg_str,updateHz,effect)
  if(ON_REG_USE_TOOL):
  watchdog_tool_reg_str=str_cat("input_int_register_",ON_TOOL_SHIFT_INT_ARR[0])
  rtde_set_watchdog(watchdog_tool_reg_str,updateHz,effect)
  end 
  if ON_DEBUG_LOG:
  local update_str=str_cat(" "+effect+" watchdog set to [Hz]: ",updateHz)
  textmsg(watchdog_conn_reg_str,update_str)
  if(ON_REG_USE_TOOL):
  local update_str=str_cat(" "+effect+" watchdog set to [Hz]: ",updateHz)
  textmsg(watchdog_tool_reg_str,update_str)
  end 
  end 
  end 
  def on_speedCB_get():
  return[on_speedCB[0],on_speedCB[1],on_speedCB[2],on_speedCB[3],on_speedCB[4],on_speedCB[5]]
  end 
  def on_speedGecko_get():
  local speedExtra=ON_ZERO6D
  if on_speedl_for_gecko:
  speedExtra=[on_speedGecko[0],on_speedGecko[1],on_speedGecko[2],on_speedGecko[3],on_speedGecko[4],on_speedGecko[5]]
  end 
  return speedExtra
  end 
  def on_speedGecko_set(speedGecko):
  on_speedGecko=[speedGecko[0],speedGecko[1],speedGecko[2],speedGecko[3],speedGecko[4],speedGecko[5]]
  end 
  thread on_dataProcess_thread():
  if ON_DEBUG_LOG:
  textmsg("Starting on_dataRead thread")
  end 
  local error=False
  on_dataProcess_running=True
  sync()
  while on_dataProcess_running:
  sync()
  on_dataRead()
  error=on_error((on_RTDE_error<0),on_rtde_feed_error,on_rtde_feed_error_title,error)
  error=on_error((ON_REG_USE_TOOL and(on_RTDE_tool_error<0)),on_rtde_feed_tool_error,on_rtde_feed_error_title,error)
  on_dataProcess_running=not error
  end 
  if error:
  halt
  end 
  if ON_DEBUG_LOG:
  textmsg("Stopping on_dataRead thread")
  end 
  end 
  thread on_set_watchdog_thread():
  sleep(2)
  on_set_rtde_watchdog(updateHz=ON_INIT_WATCHDOG_HZ)
  sleep(1/ON_INIT_WATCHDOG_HZ)
  on_dataProcess_running=False
  kill on_dataProcess_thrd
  end 
  
  #======    End of OnRobot Interface    ======#
  #======    OnRobot QC Setup Tool Connector    ======#
  
  def tc_setup_tool():
  if ON_DEBUG_LOG:
  textmsg("QC Setup Tool Connector start...")
  end 
  set_tool_voltage(24)
  
  set_tool_communication(True,1000000,2,1,1.5,3.5)
  
  if ON_DEBUG_LOG:
  textmsg("QC Setup Tool Connector end.")
  end 
  end 
  
  #======    End of OnRobot QC Setup Tool Connector    ======#
  #======    OnRobot TFG Interface    ======#
  
  tfg_dataRead_running=False
  def tfg_dataRead_RTDE(tool_index):
  local reg_offset_bool=ON_TOOL_SHIFT_BOOL_ARR[tool_index]
  local reg_offset_int=ON_TOOL_SHIFT_INT_ARR[tool_index]
  local reg_offset_float=ON_TOOL_SHIFT_FLOAT_ARR[tool_index]
  enter_critical
  floatRegDummy=read_input_float_register(reg_offset_float+0)
  tfg_Diameter_arr[tool_index]=floatRegDummy
  intRegDummy=read_input_integer_register(reg_offset_int+0)
  tfg_device_id_arr[tool_index]=intRegDummy
  intRegDummy=read_input_integer_register(reg_offset_int+1)
  tfg_product_code_arr[tool_index]=intRegDummy
  intRegDummy=read_input_integer_register(reg_offset_int+2)
  tfg_Status_arr[tool_index]=intRegDummy
  boolRegDummy=read_input_boolean_register(reg_offset_bool+0)
  tfg_Busy_arr[tool_index]=boolRegDummy
  boolRegDummy=read_input_boolean_register(reg_offset_bool+1)
  tfg_Grip_detected_arr[tool_index]=boolRegDummy
  boolRegDummy=read_input_boolean_register(reg_offset_bool+2)
  tfg_Force_Grip_detected_arr[tool_index]=boolRegDummy
  exit_critical
  end 
  thread tfg_dataRead_thread():
  if ON_DEBUG_LOG:
  textmsg("Starting tfg_dataRead thread")
  end 
  while tfg_dataRead_running:
  sync()
  if(tfg_index==ON_DI_DUAL):
  tfg_dataRead_RTDE(ON_DI_PRIMARY)
  tfg_dataRead_RTDE(ON_DI_SECONDARY)
  else:
  tfg_dataRead_RTDE(tfg_index)
  end 
  end 
  if ON_DEBUG_LOG:
  textmsg("Stopping tfg_dataRead thread")
  end 
  end 
  
  #======    End of OnRobot TFG Interface    ======#
  #======    OnRobot TCP Messages    ======#
  
  on_tcp_log_msg_default="OnRobot: Offset TVP robot impostato su:"
  on_tcp_log_msg_primary="OnRobot: Offset TVP robot impostato su Primario:"
  on_tcp_log_msg_secondary="OnRobot: Offset TVP robot impostato su Secondario:"
  
  #======    End of OnRobot TCP Messages    ======#
  #======    OnRobot TCP    ======#
  
  on_tcp_offset_actual=ON_ZEROFRAME
  on_tcp_offset_primary=ON_ZEROFRAME
  on_tcp_static_primary=ON_ZEROFRAME
  on_tcp_dynamic_primary=ON_ZEROFRAME
  on_tcp_adapters=ON_ZEROFRAME
  on_tcp_qc_primary=ON_ZEROFRAME
  on_tcp_base_primary=ON_ZEROFRAME
  on_tcp_gripper_static_primary=ON_ZEROFRAME
  on_tcp_workpiece_primary=ON_ZEROFRAME
  on_tcp_gripper_dynamic_primary=ON_ZEROFRAME
  on_tcp_gripper_primary=ON_ZEROFRAME
  on_tcp_offset_secondary=ON_ZEROFRAME
  on_tcp_static_secondary=ON_ZEROFRAME
  on_tcp_dynamic_secondary=ON_ZEROFRAME
  on_tcp_qc_secondary=ON_ZEROFRAME
  on_tcp_base_secondary=ON_ZEROFRAME
  on_tcp_gripper_static_secondary=ON_ZEROFRAME
  on_tcp_workpiece_secondary=ON_ZEROFRAME
  on_tcp_gripper_dynamic_secondary=ON_ZEROFRAME
  on_tcp_gripper_secondary=ON_ZEROFRAME
  on_tcp_custom_preset_assigned=False
  on_tcp_custom_preset=ON_ZEROFRAME
  def on_tcp_init_adapters():
  if ON_DEBUG_LOG:
  textmsg("TCP Init Adapters start..")
  end 
  enter_critical
  on_tcp_adapters=ON_ZEROFRAME
  local adapterCount=length(on_tcp_adapters_array)
  local i=0
  while(i<adapterCount):
  on_tcp_adapters=pose_trans(on_tcp_adapters,on_tcp_adapters_array[i])
  i=i+1
  end
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("TCP Init Adapters end.")
  end 
  end 
  def on_tcp_update_primary():
  if ON_DEBUG_LOG:
  textmsg("TCP Update Primary start..")
  end 
  on_tcp_gripper_dynamic_primary=p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  enter_critical
  on_tcp_dynamic_primary=pose_trans(on_tcp_static_primary,on_tcp_gripper_dynamic_primary)
  on_tcp_offset_primary=pose_trans(on_tcp_dynamic_primary,on_tcp_workpiece_primary)
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("TCP Update Primary end.")
  end 
  end 
  def on_tcp_init_primary():
  if ON_DEBUG_LOG:
  textmsg("TCP Init Primary start..")
  end 
  enter_critical
  on_tcp_base_primary=pose_trans(on_tcp_adapters,on_tcp_qc_primary)
  on_tcp_static_primary=pose_trans(on_tcp_base_primary,on_tcp_gripper_static_primary)
  exit_critical
  on_tcp_update_primary()
  if ON_DEBUG_LOG:
  textmsg("TCP Init Primary end.")
  end 
  end 
  def on_tcp_offset_set(TCP_offset):
  if ON_DEBUG_LOG:
  textmsg("TCP Offset set started!")
  end 
  on_tcp_offset_send(TCP_offset)
  if(on_follow_tcp):
  set_tcp(TCP_offset)
  end 
  on_robot_TCP_offset=TCP_offset
  if ON_DEBUG_LOG:
  textmsg("TCP Offset set to: ",on_robot_TCP_offset)
  end 
  end 
  def on_tcp_offset_forced_set_actual(isPrimary=True):
  if(not on_follow_tcp):
  
  local tcp_log_msg=on_tcp_log_msg_default
  
  textmsg(tcp_log_msg,on_tcp_offset_actual)
  set_tcp(on_tcp_offset_actual)
  end 
  end 
  def on_tcp_update(isPrimary=True):
  on_tcp_update_primary()
  
  on_tcp_set_actual_to(isPrimary)
  end 
  def on_tcp_set_actual_to(isPrimary=True):
  
  on_tcp_offset_actual=on_tcp_offset_primary
  if(on_follow_tcp):
  textmsg(on_tcp_log_msg_default,on_tcp_offset_actual)
  end 
  
  on_tcp_active_is_primary=isPrimary
  on_tcp_offset_set(on_tcp_offset_actual)
  end 
  def on_tcp_update_workpiece_primary(workpiece_offset):
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool Primary start..")
  end 
  on_tcp_workpiece_primary=workpiece_offset
  on_tcp_update_primary()
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool Primary end.")
  end 
  end 
  def on_tcp_workpiece_rpy_get(xyz=[0.0,0.0,0.0],rpy=[0.0,0.0,0.0]):
  local rotvec=rpy2rotvec(rpy)
  local workpiece_offset=p[xyz[0],xyz[1],xyz[2],rotvec[0],rotvec[1],rotvec[2]]
  return workpiece_offset
  end 
  
  def on_tcp_update_workpiece(workpiece_offset,tool_index=0):
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool start..")
  end 
  if(tool_index!=ON_DI_SECONDARY):
  on_tcp_update_workpiece_primary(workpiece_offset)
  local isPrimary=True
  
  end 
  on_tcp_set_actual_to(isPrimary)
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool end.")
  end 
  end 
  def on_get_tcp_for(tool_index):
  if tool_index==ON_DI_SECONDARY:
  local actual_tcp=on_tcp_static_secondary
  else:
  local actual_tcp=on_tcp_static_primary
  end 
  return actual_tcp
  end 
  def on_tcp_custom_unused():
  return ON_ZEROFRAME
  end 
  def on_tcp_update_custom():
  if ON_DEBUG_LOG:
  textmsg("TCP Update Custom start..")
  end 
  if(on_custom_tcp_enabled):
  on_tcp_custom_unused()
  on_tcp_custom_unused()
  on_tcp_custom_unused()
  on_tcp_custom_unused()
  
  end 
  if ON_DEBUG_LOG:
  textmsg("TCP Update Custom end.")
  end 
  end 
  
  #======    End of OnRobot TCP    ======#
  #======    OnRobot Payload Messages    ======#
  
  on_mass_log_msg="OnRobot: Massa carico utile robot impostata su:"
  on_cog_log_msg="OnRobot: Baricentro carico utile robot impostato su:"
  
  #======    End of OnRobot Payload Messages    ======#
  #======    OnRobot Payload    ======#
  
  on_cog_actual=ON_ZEROFRAME
  on_mass_actual=0.0
  on_cog_primary=ON_ZEROFRAME
  on_cog_L1L2_primary=ON_ZEROFRAME
  on_mass_primary=0.0
  on_mass_L1L2_primary=0.0
  on_cog_adapters=ON_ZEROFRAME
  on_cog_qc_primary=ON_ZEROFRAME
  on_cog_base_primary=ON_ZEROFRAME
  on_cog_gripper_primary=ON_ZEROFRAME
  on_cog_workpiece_primary=ON_ZEROFRAME
  on_mass_adapters=0.0
  on_mass_qc_primary=0.0
  on_mass_base_primary=0.0
  on_mass_gripper_primary=0.0
  on_mass_workpiece_primary=0.0
  on_cog_secondary=ON_ZEROFRAME
  on_mass_secondary=0.0
  on_cog_gripper_secondary=ON_ZEROFRAME
  on_mass_gripper_secondary=0.0
  on_cog_workpiece_secondary=ON_ZEROFRAME
  on_mass_workpiece_secondary=0.0
  ON_LB2KG001=0.45359237/100
  def on_payload_init_adapters():
  if ON_DEBUG_LOG:
  textmsg("TCP Init Adapters start..")
  end 
  enter_critical
  on_cog_adapters=ON_ZEROFRAME
  on_mass_adapters=0.0
  local massLAL0Ratio=0
  local adapterAbsCOG=ON_ZEROFRAME
  local tcp_adapter_offset=ON_ZEROFRAME
  local adapterCount=length(on_tcp_adapters_array)
  local i=0
  while(i<adapterCount):
  on_mass_adapters=on_mass_adapters+on_mass_adapters_array[i]
  if(on_mass_adapters<=0):
  massLAL0Ratio=0
  else:
  massLAL0Ratio=on_mass_adapters_array[i]/on_mass_adapters
  end
  adapterAbsCOG=pose_trans(tcp_adapter_offset,on_tcp_adapters_array[i])
  adapterAbsCOG=p[adapterAbsCOG[0],adapterAbsCOG[1],adapterAbsCOG[2],0.0,0.0,0.0]
  on_cog_adapters=interpolate_pose(on_cog_adapters,adapterAbsCOG,massLAL0Ratio)
  on_cog_adapters=p[on_cog_adapters[0],on_cog_adapters[1],on_cog_adapters[2],0.0,0.0,0.0]
  tcp_adapter_offset=pose_trans(tcp_adapter_offset,on_tcp_adapters_array[i])
  i=i+1
  sync()
  end
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("TCP Init Adapters end.")
  end 
  end 
  def on_payload_update_primary():
  if ON_DEBUG_LOG:
  textmsg("Payload Update Primary start..")
  end 
  enter_critical
  on_mass_primary=on_mass_L1L2_primary+on_mass_workpiece_primary
  local massL1L2L3Ratio=on_mass_workpiece_primary/on_mass_primary
  local workpieceAbsCOG=pose_trans(on_tcp_dynamic_primary,on_cog_workpiece_primary)
  workpieceAbsCOG=p[workpieceAbsCOG[0],workpieceAbsCOG[1],workpieceAbsCOG[2],0.0,0.0,0.0]
  on_cog_primary=interpolate_pose(on_cog_L1L2_primary,workpieceAbsCOG,massL1L2L3Ratio)
  on_cog_primary=p[on_cog_primary[0],on_cog_primary[1],on_cog_primary[2],0.0,0.0,0.0]
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("Payload Update Primary end.")
  end 
  end 
  def on_payload_init_primary():
  if ON_DEBUG_LOG:
  textmsg("Payload Init Primary start..")
  end 
  enter_critical
  on_mass_base_primary=on_mass_adapters+on_mass_qc_primary
  local massL0L1Ratio=on_mass_qc_primary/on_mass_base_primary
  on_mass_L1L2_primary=on_mass_base_primary+on_mass_gripper_primary
  local massL1L2Ratio=on_mass_gripper_primary/on_mass_L1L2_primary
  local qcAbsCOG=pose_trans(on_tcp_adapters,on_cog_qc_primary)
  qcAbsCOG=p[qcAbsCOG[0],qcAbsCOG[1],qcAbsCOG[2],0.0,0.0,0.0]
  on_cog_base_primary=interpolate_pose(on_cog_adapters,qcAbsCOG,massL0L1Ratio)
  on_cog_base_primary=p[on_cog_base_primary[0],on_cog_base_primary[1],on_cog_base_primary[2],0.0,0.0,0.0]
  local gripperAbsCOG=pose_trans(on_tcp_base_primary,on_cog_gripper_primary)
  gripperAbsCOG=p[gripperAbsCOG[0],gripperAbsCOG[1],gripperAbsCOG[2],0.0,0.0,0.0]
  on_cog_L1L2_primary=interpolate_pose(on_cog_base_primary,gripperAbsCOG,massL1L2Ratio)
  on_cog_L1L2_primary=p[on_cog_L1L2_primary[0],on_cog_L1L2_primary[1],on_cog_L1L2_primary[2],0.0,0.0,0.0]
  exit_critical
  on_payload_update_primary()
  if ON_DEBUG_LOG:
  textmsg("Payload Init Primary end.")
  end 
  end 
  def on_payload_update():
  on_payload_update_primary()
  
  on_mass_actual =on_mass_primary
  on_cog_actual=on_cog_primary
  
  on_payload_set_actual()
  end 
  def on_payload_set_actual():
  
  on_mass_actual =on_mass_primary
  on_cog_actual=on_cog_primary
  
  local CoG=[on_cog_actual[0],on_cog_actual[1],on_cog_actual[2]]
  on_payload_set(on_mass_actual,CoG)
  end 
  def on_payload_update_workpiece_primary(workpiece_mass=0,workpiece_cog=[0.0,0.0,0.0]):
  if ON_DEBUG_LOG:
  textmsg("Payload Update Workpiece Primary start..")
  end 
  on_cog_workpiece_primary=p[workpiece_cog[0],workpiece_cog[1],workpiece_cog[2],0.0,0.0,0.0]
  on_mass_workpiece_primary=workpiece_mass
  on_payload_update_primary()
  if ON_DEBUG_LOG:
  textmsg("Payload Update Workpiece Primary end.")
  end 
  end 
  def on_payload_set(mass,CoG):
  if ON_DEBUG_LOG:
  textmsg("Payload set started!")
  end 
  local center_of_gravity=[CoG[0],CoG[1],CoG[2]]
  on_payload_send(center_of_gravity,mass)
  if(on_isMetric):
  local roundedMass=floor(mass*100+0.5)/100
  else:
  local roundedMass=floor(mass/ON_LB2KG001+0.5)*ON_LB2KG001
  end 
  set_payload(roundedMass,center_of_gravity)
  on_mass_actual=roundedMass
  on_cog_actual=p[CoG[0],CoG[1],CoG[2],0.0,0.0,0.0]
  if ON_DEBUG_LOG:
  textmsg("Payload mass, CoG set to: ",str_cat(str_cat(mass,", "),CoG))
  end 
  end 
  
  def on_payload_update_secondary():
  end 
  def on_payload_init_secondary():
  end 
  
  def on_payload_update_workpiece(workpiece_mass,workpiece_cog=[0.0,0.0,0.0],tool_index=0):
  if ON_DEBUG_LOG:
  textmsg("Payload Update Workpiece start..")
  end 
  if(tool_index!=ON_DI_SECONDARY):
  on_cog_workpiece_primary=p[workpiece_cog[0],workpiece_cog[1],workpiece_cog[2],0.0,0.0,0.0]
  on_mass_workpiece_primary=workpiece_mass
  else:
  on_cog_workpiece_secondary=p[workpiece_cog[0],workpiece_cog[1],workpiece_cog[2],0.0,0.0,0.0]
  on_mass_workpiece_secondary=workpiece_mass
  end 
  on_payload_update()
  if ON_DEBUG_LOG:
  textmsg("Payload Update Workpiece end.")
  end 
  end 
  def on_payload_get_cog2tcp_workpiece(tool_index=0):
  if(tool_index!=ON_DI_SECONDARY):
  local cog_tool=[on_tcp_workpiece_primary[0],on_tcp_workpiece_primary[1],on_tcp_workpiece_primary[2]]
  else:
  local cog_tool=[on_tcp_workpiece_secondary[0],on_tcp_workpiece_secondary[1],on_tcp_workpiece_secondary[2]]
  end 
  return cog_tool
  end 
  
  #======    End of OnRobot Payload    ======#
  #======    OnRobot QC TCP    ======#
  
  onrobotmini=0
  
  def on_tcp_offset_send(TCP_offset):
  on_robot_TCP_offset=TCP_offset
  end 
  def on_payload_send(CoG,mass):
  on_robot_payload_cog=CoG
  on_robot_payload_mass=mass
  end 
  
  
  #======    End of OnRobot QC TCP    ======#
  #======    OnRobot TFG TCP    ======#
  
  def tfg_payload_set(mass,tool_index=0):
  if ON_DEBUG_LOG:
  textmsg("TFG Payload mass command starting..")
  end 
  if(tool_index==ON_DI_SECONDARY):
  local cogTool=[on_cog_workpiece_secondary[0],on_cog_workpiece_secondary[1],on_cog_workpiece_secondary[2]]
  else:
  local cogTool=[on_cog_workpiece_primary[0],on_cog_workpiece_primary[1],on_cog_workpiece_primary[2]]
  end 
  if(tfg_Grip_detected_arr[tool_index]):
  local mass2set=mass
  else:
  local mass2set=0.0
  tfg_Grip_guard_arr[tool_index]=False
  end 
  on_payload_update_workpiece(mass2set,cogTool,tool_index)
  if ON_DEBUG_LOG:
  textmsg("3FG Payload mass command ended.")
  end 
  end 
  
  #======    End of OnRobot TFG TCP    ======#
  #======    OnRobot  Speedl    ======#
  
  on_speedl_thread_handler=0
  on_speedl_is_enabled=False
  on_speedl_is_running=False
  on_speedl_acc=0.0
  ft_speedl_hg_caranteen_reached=False
  ft_speedl_hg_caranteen_safemode=False
  on_speedl_for_ftcontrol=False
  on_speedl_for_move=False
  on_speedl_for_handguide=False
  on_speedl_for_insertpart=False
  on_speedl_for_depthcompensation=False
  on_speedl_for_center=False
  on_speedl_for_gecko=False
  on_speedl_acc=10000.0 
  on_speedl_acc_to_zero=3.0 
  ON_SPEEDL_FTCONTROL=1
  ON_SPEEDL_HANDGUIDE=2
  ON_SPEEDL_TRAJECTORY=3
  ON_SPEEDL_MOVE=ON_SPEEDL_TRAJECTORY
  ON_SPEEDL_INSERTPART=4
  ON_SPEEDL_DEPTHCOMP=5
  ON_SPEEDL_CENTER=6
  ON_SPEEDL_GECKO=7
  def on_wait_ms(time_ms):
  local sync_time=ceil(norm(time_ms/2.0))
  while(sync_time>0):
  sync_time=sync_time-1
  sync()
  end
  end 
  def on_error(status_flag,message,title,stop_var=False):
  if(status_flag):
  popup(message,title=title,error=True,blocking=False)
  stop_var=True
  end 
  return stop_var
  end 
  def on_warning(status_flag,message,title,isPopupNeeded=False,is_shown=False):
  if(status_flag):
  if(not is_shown):
  if(isPopupNeeded):
  popup(message,title=title,warning=True,blocking=False)
  else:
  textmsg(title+": ",message)
  end 
  is_shown=True
  end 
  else:
  is_shown=False
  end 
  return is_shown
  end 
  def on_speedl_add_extra(speedBase,speedExtra):
  speedSum=ON_ZERO6D
  speedBaseP=p[speedBase[0],speedBase[1],speedBase[2],speedBase[3],speedBase[4],speedBase[5]]
  speedExtraP=p[speedExtra[0],speedExtra[1],speedExtra[2],speedExtra[3],speedExtra[4],speedExtra[5]]
  speedSumP=pose_add(speedExtraP,speedBaseP)
  speedSum=[speedSumP[0],speedSumP[1],speedSumP[2],speedSumP[3],speedSumP[4],speedSumP[5]]
  return speedSum
  end 
  
  thread on_speedl_thread():
  if ON_DEBUG_LOG:
  textmsg("Speedl thread started..")
  end 
  enter_critical
  on_speedl_is_running=True
  on_speedl_is_enabled=True
  exit_critical
  on_speedL=ON_ZERO6D
  on_speedL_last=ON_ZERO6D
  
  while on_speedl_is_running:
  on_speedBase=on_speedCB_get()
  on_speedL=on_speedBase
  
  
  if on_speedl_is_enabled:
  if(on_speedL==ON_ZERO6D):
  on_speedL=[on_speedL_last[0]/100,on_speedL_last[1]/100,on_speedL_last[2]/100,on_speedL_last[3]/100,on_speedL_last[4]/100,on_speedL_last[5]/100]
  end
  speedl(on_speedL,a=on_speedl_acc,t=0.001)
  else:
  speedl(ON_ZERO6D,a=on_speedl_acc_to_zero,t=0.001)
  end 
  on_speedL_last=on_speedL
  end 
  
  on_speedL=ON_ZERO6D
  if ON_DEBUG_LOG:
  textmsg("Speedl thread ended.")
  end 
  end 
  def on_speedl_integer_get():
  local speedl_integer=binary_list_to_integer([on_speedl_for_ftcontrol,on_speedl_for_handguide,on_speedl_for_move,on_speedl_for_insertpart,on_speedl_for_depthcompensation,on_speedl_for_center,on_speedl_for_gecko])
  return speedl_integer
  end 
  def on_speedl_start_for(speedl_id):
  if(speedl_id==ON_SPEEDL_FTCONTROL):
  on_speedl_for_ftcontrol=True
  elif(speedl_id==ON_SPEEDL_HANDGUIDE):
  on_speedl_for_handguide=True
  elif(speedl_id==ON_SPEEDL_TRAJECTORY):
  on_speedl_for_move=True
  elif(speedl_id==ON_SPEEDL_INSERTPART):
  on_speedl_for_insertpart=True
  elif(speedl_id==ON_SPEEDL_DEPTHCOMP):
  on_speedl_for_depthcompensation=True
  elif(speedl_id==ON_SPEEDL_CENTER):
  on_speedl_for_center=True
  elif(speedl_id==ON_SPEEDL_GECKO):
  on_speedl_for_gecko=True
  else:
  textmsg("Unknown Start speedl ID received: ",speedl_id)
  end 
  local speedl_integer=on_speedl_integer_get()
  if not(speedl_integer==0):
  if not on_speedl_is_running:
  on_speedl_thread_handler=run on_speedl_thread()
  end 
  end 
  return on_speedl_is_running
  end 
  def on_speedl_stop_for(speedl_id,brake=10,brakeRot=10):
  if(speedl_id==ON_SPEEDL_FTCONTROL):
  on_speedl_for_ftcontrol=False
  elif(speedl_id==ON_SPEEDL_HANDGUIDE):
  on_speedl_for_handguide=False
  elif(speedl_id==ON_SPEEDL_TRAJECTORY):
  on_speedl_for_move=False
  elif(speedl_id==ON_SPEEDL_INSERTPART):
  on_speedl_for_insertpart=False
  elif(speedl_id==ON_SPEEDL_DEPTHCOMP):
  on_speedl_for_depthcompensation=False
  elif(speedl_id==ON_SPEEDL_CENTER):
  on_speedl_for_center=False
  elif(speedl_id==ON_SPEEDL_GECKO):
  on_speedl_for_gecko=False
  on_speedGecko_set(ON_ZERO6D)
  else:
  textmsg("Unknown Stop speedl ID received: ",speedl_id)
  end 
  local speedl_integer=on_speedl_integer_get()
  if(speedl_integer==0):
  if(on_speedl_is_running):
  kill on_speedl_thread_handler
  enter_critical
  on_speedl_is_running=False
  exit_critical
  
  end 
  if ON_DEBUG_LOG:
  textmsg("Speedl thread stopped")
  end 
  stopl(brake,brakeRot)
  end 
  return on_speedl_is_running
  end 
  def on_speedl_pause():
  on_speedl_is_enabled=False
  return on_speedl_integer_get()
  end 
  def on_speedl_resume():
  on_speedl_is_enabled=True
  return on_speedl_integer_get()
  end 
  
  #======    End of OnRobot  Speedl    ======#
  #======    OnRobot TFG Engine Messages    ======#
  
  tfg_error_title="OnRobot - errore 3FG"
  tfg_device_id_waiting="In attesa di un valido ID per OnRobot 3FG..."
  tfg_device_id_timeout="Tempo di attesa di un valido ID per OnRobot 3FG scaduto.<br>Programma arrestato."
  tfg_data_error_title="Errore dati OnRobot 3FG"
  tfg_data_error_type="Nessuna pinza o pinza sconosciuta connessa."
  tfg_data_warning_title="Avvertimento dati OnRobot 3FG:"
  tfg_status_error_title="OnRobot - Errore stato 3FG"
  tfg_status_error_missing="Problema di comunicazione con una pinza 3FG. Controlla il dispositivo.<br>Programma arrestato."
  tfg_else_error="Codice errore sconosciuto:"
  tfg_status_msg_single="Stato 3FG:"
  tfg_data_error_bit0_single="Dimensioni errate dai dati float ricevuti."
  tfg_data_error_bit1_single="Dimensioni errate dai dati integer ricevuti."
  tfg_data_error_bit2_single="Dimensioni errate dai dati boolean ricevuti."
  tfg_status_msg_primary="Stato primario 3FG:"
  tfg_data_error_bit0_primary="Dimensioni errate dai dati float ricevuti per 3FG primario."
  tfg_data_error_bit1_primary="Dimensioni errate dai dati integer ricevuti per 3FG primario."
  tfg_data_error_bit2_primary="Dimensioni errate dai dati boolean ricevuti per 3FG primario."
  tfg_status_msg_secondary="Stato secondario 3FG:"
  tfg_data_error_bit0_secondary="Dimensioni errate dai dati float ricevuti per 3FG secondario."
  tfg_data_error_bit1_secondary="Dimensioni errate dai dati integer ricevuti per 3FG secondario."
  tfg_data_error_bit2_secondary="Dimensioni errate dai dati boolean ricevuti per 3FG secondario."
  
  #======    End of OnRobot TFG Engine Messages    ======#
  #======    OnRobot TFG Engine    ======#
  
  tfg_dataProcess_running=False
  tfg_start_flange=ON_ZEROPOSE
  tfg_start_pose=ON_ZEROPOSE
  tfg_status_warning_title=str_cat(tfg_status_error_title,": ")
  def tfg_dataProcess_status_errors(tfg_stop=False):
  enter_critical
  local tool_index=tfg_index
  if(tool_index==ON_DI_DUAL):
  tool_index=ON_DI_SECONDARY
  tfg_stop=on_error((tfg_device_id_arr[tool_index]!=tool_index),tfg_status_error_missing,tfg_status_error_title,tfg_stop)
  tfg_stop=on_error((tfg_product_code_arr[tool_index]==ON_DEVICE_ID_MISSING),tfg_status_error_missing,tfg_status_error_title,tfg_stop)
  tool_index=ON_DI_PRIMARY
  end 
  tfg_stop=on_error((tfg_device_id_arr[tool_index]!=tool_index),tfg_status_error_missing,tfg_status_error_title,tfg_stop)
  tfg_stop=on_error((tfg_product_code_arr[tool_index]==ON_DEVICE_ID_MISSING),tfg_status_error_missing,tfg_status_error_title,tfg_stop)
  
  
  exit_critical
  return tfg_stop
  end 
  def tfg_dataProcess():
  enter_critical
  local tool_index=tfg_index
  if tool_index==ON_DI_DUAL:
  tfg_Diameter_primary=tfg_Diameter_arr[ON_DI_PRIMARY]
  tfg_Busy_primary=tfg_Busy_arr[ON_DI_PRIMARY]
  tfg_Grip_detected_primary=tfg_Grip_detected_arr[ON_DI_PRIMARY]
  tfg_Force_Grip_detected_primary=tfg_Force_Grip_detected_arr[ON_DI_PRIMARY]
  tfg_Diameter_secondary=tfg_Diameter_arr[ON_DI_SECONDARY]
  tfg_Busy_secondary=tfg_Busy_arr[ON_DI_SECONDARY]
  tfg_Grip_detected_secondary=tfg_Grip_detected_arr[ON_DI_SECONDARY]
  tfg_Force_Grip_detected_secondary=tfg_Force_Grip_detected_arr[ON_DI_SECONDARY]
  else:
  tfg_Diameter=tfg_Diameter_arr[tool_index]
  tfg_Busy=tfg_Busy_arr[tool_index]
  tfg_Grip_detected=tfg_Grip_detected_arr[tool_index]
  tfg_Force_Grip_detected=tfg_Force_Grip_detected_arr[tool_index]
  end 
  exit_critical
  end 
  thread tfg_dataProcess_thread():
  if ON_DEBUG_LOG:
  textmsg("Starting tfg_dataProcess thread")
  end 
  while tfg_dataProcess_running:
  sync()
  local tfg_stop=False
  tfg_stop=tfg_dataProcess_status_errors(tfg_stop)
  if tfg_stop:
  halt
  end 
  tfg_dataProcess()
  end 
  if ON_DEBUG_LOG:
  textmsg("Stopping tfg_dataProcess thread")
  end 
  end 
  def tfg_index_get():
  return tfg_index
  end 
  
  #======    End of OnRobot TFG Engine    ======#
  textmsg(on_devices_primary_log, ": Quick Changer + 3FG15 + [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]")
  on_follow_tcp = False
  on_tcp_active_is_primary = True
  on_tcp_adapters_array = []
  on_cog_adapters_array = []
  on_mass_adapters_array = []
  on_tcp_qc_primary = p[0.0, 0.0, 0.0136, 0.0, 0.0, 0.0]
  on_cog_qc_primary = p[0.0, 0.0, 0.004, 0.0, 0.0, 0.0]
  on_mass_qc_primary = 0.06
  on_tcp_gripper_static_primary = p[0.0, 0.0, 0.156, 0.0, 0.0, 0.0]
  on_cog_gripper_primary = p[0.000, 0.000, 0.083, 0.0, 0.0, 0.0]
  on_mass_gripper_primary = 1.15
  on_tcp_workpiece_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_cog_workpiece_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_mass_workpiece_primary = 0.0
  #======    OnRobot RG Width Messages    ======#
  
  tfg_grip_title="Presa OnRobot - TFG"
  tfg_grip_return_error_n1="Comando TFG restituito con errore.<br>Assicurarsi che la larghezza richiesta sia entro i limiti.<br>Programma arrestato."
  tfg_grip_return_error_n2="Il comando Presa TFG non ha applicato la forza all’estremità.<br>Programma arrestato."
  
  #======    End of OnRobot RG Width Messages    ======#
  #======    OnRobot TFG Diameter command tfg_grip, tfg_flexible_grip    ======#
  
  tfg__grip_param_warning_diameter="The parameter 'diameter' is out of the limits. Limited value sent: "
  tfg__grip_param_warning_force="The parameter 'force' is out of the limits. Limited value sent: "
  tfg_cmd_move=0
  tfg_cmd_grip=1
  tfg_cmd_flexible_grip=2
  def tfg_grip_or_move(grip_cmd,diameter,force,external_grip=True,stop_if_no_force=False,tool_index=0,blocking=True):
  if ON_DEBUG_LOG:
  textmsg("TFG Grip start..")
  end 
  local retVal=0
  tfg_Grip_guard_arr[tool_index]=False
  sync()
  if(tool_index==ON_DI_SECONDARY):
  local isPrimary=False
  else:
  local isPrimary=True
  end 
  if(on_follow_tcp):
  on_tcp_set_actual_to(isPrimary)
  end 
  sync()
  if grip_cmd==tfg_cmd_grip:
  retVal=on_tool_xmlrpc.tfg_grip(tool_index,diameter+0.0,force+0.0,not external_grip)
  elif grip_cmd==tfg_cmd_move:
  retVal=on_tool_xmlrpc.tfg_move(tool_index,diameter+0.0)
  else:
  retVal=on_tool_xmlrpc.tfg_flexible_grip(tool_index,diameter+0.0,force+0.0,not external_grip)
  end
  if(retVal!=0):
  popup(tfg_grip_return_error_n1,tfg_grip_title,error=True,blocking=False)
  halt
  end 
  if blocking:
  local timeout=0
  while not tfg_Busy_arr[tool_index]:
  sleep(0.008)
  timeout=timeout+1
  if timeout>20:
  break
  end 
  end 
  while(tfg_Busy_arr[tool_index]==True):
  sync()
  end 
  if stop_if_no_force and not tfg_Force_Grip_detected_arr[tool_index]:
  popup(tfg_grip_return_error_n2,tfg_grip_title,error=True,blocking=False)
  halt
  end
  end 
  if(on_follow_tcp):
  on_tcp_update(isPrimary)
  end 
  if ON_DEBUG_LOG:
  textmsg("3FG Grip ended.")
  end 
  return retVal
  end 
  def tfg_grip(diameter,force,external_grip=True,stop_if_no_force=True,tool_index=0,blocking=True):
  retVal=tfg_grip_or_move(tfg_cmd_grip,diameter,force,external_grip,stop_if_no_force,tool_index,blocking)
  return retVal
  end 
  def tfg_prepare(diameter,tool_index=0,blocking=True):
  retVal=tfg_grip_or_move(tfg_cmd_move,diameter,0,False,False,tool_index,blocking)
  return retVal
  end 
  def tfg_release(diameter,tool_index=0,blocking=True):
  retVal=tfg_grip_or_move(tfg_cmd_move,diameter,0,False,False,tool_index,blocking)
  return retVal
  end 
  def tfg_flexible_grip(diameter,force,external_grip=True,stop_if_no_force=True,tool_index=0,blocking=True):
  retVal=tfg_grip_or_move(tfg_cmd_flexible_grip,diameter,force,external_grip,stop_if_no_force,tool_index,blocking)
  return retVal
  end 
  
  #======    End of OnRobot TFG Diameter command tfg_grip, tfg_flexible_grip    ======#
  #======    OnRobot VG Monitor Messages    ======#
  
  tfg_monitor_error_title="Presa OnRobot TFG persa"
  tfg_monitor_grip_lost_error="Rilevata perdita di presa.<br>Programma arrestato."
  
  #======    End of OnRobot VG Monitor Messages    ======#
  #======    OnRobot TFG Monitor    ======#
  
  thread tfg_monitor_thread():
  while True:
  sync()
  local tfg_error=False
  if(tfg_index==ON_DI_DUAL):
  local tool_index=ON_DI_SECONDARY
  tfg_error=tfg_monitor_check(tool_index)
  local tool_index=ON_DI_PRIMARY
  else:
  local tool_index=tfg_index
  end 
  tfg_error=tfg_error or tfg_monitor_check(tool_index)
  if tfg_error:
  halt
  end 
  end 
  end 
  def tfg_monitor_check(tool_index=0):
  local error=False
  if tfg_Grip_guard_arr[tool_index]and not tfg_Grip_detected_arr[tool_index]:
  popup(tfg_monitor_grip_lost_error,title=tfg_monitor_error_title,error=True,blocking=False)
  tfg_payload_set(0,tool_index=tool_index)
  error=True
  end 
  return error
  end 
  
  #======    End of OnRobot TFG Monitor    ======#
  #======    OnRobot Run    ======#
  
  on_portopen_javaSocket()
  sync()
  textmsg(on_xmlrpc_start_ip,on_conn_ip)
  if(ON_REG_USE_TOOL):
  on_regStart_conn=[ON_CONN_SHIFT_BOOL,ON_CONN_SHIFT_INT,ON_CONN_SHIFT_FLOAT]
  on_regSum_conn=[ON_CONN_REG_SUM_BOOL,ON_CONN_REG_SUM_INT,ON_CONN_REG_SUM_FLOAT]
  on_rtde_feed_open(on_conn_ip,on_conn_rtde_feed_name,on_regStart_conn,on_regSum_conn,ON_REGISTERS_SPEEDL_FLOAT)
  sync()
  textmsg(on_xmlrpc_start_ip,on_tool_ip)
  on_regStart_tool=[ON_TOOL_SHIFT_BOOL,ON_TOOL_SHIFT_INT,ON_TOOL_SHIFT_FLOAT]
  on_regSum_tool=[ON_TOOL_REG_SUM_BOOL,ON_TOOL_REG_SUM_INT,ON_TOOL_REG_SUM_FLOAT]
  on_rtde_feed_open(on_tool_ip,on_tool_rtde_feed_name,on_regStart_tool,on_regSum_tool,0)
  sync()
  else:
  on_regStart_conn=[ON_CONN_SHIFT_BOOL,ON_CONN_SHIFT_INT,ON_CONN_SHIFT_FLOAT]
  on_regSum_conn=[ON_CONN_REG_SUM_BOOL,ON_CONN_REG_SUM_INT,ON_CONN_REG_SUM_FLOAT]
  on_rtde_feed_open(on_conn_ip,on_conn_rtde_feed_name,on_regStart_conn,on_regSum_conn,ON_REGISTERS_SPEEDL_FLOAT)
  sync()
  end
  on_set_rtde_watchdog(updateHz=0.2)
  sync()
  on_dataProcess_thrd=run on_dataProcess_thread()
  sync()
  on_tcp_init_adapters()
  on_payload_init_adapters()
  on_tcp_init_primary()
  on_payload_init_primary()
  
  on_tcp_update_custom()
  on_tcp_set_actual_to(on_tcp_active_is_primary)
  if(on_follow_tcp):
  on_payload_set_actual()
  end 
  on_watchdog_thrd=run on_set_watchdog_thread()
  sync()
  
  #======    End of OnRobot Run    ======#
  #======    OnRobot QC Start    ======#
  
  if(on_toolConnector):
  tc_setup_tool()
  end 
  sync()
  
  #======    End of OnRobot QC Start    ======#
  #======    OnRobot TFG Run    ======#
  
  def tfg_wait_for_init(tool_index):
  local tfg_timeout=0
  while not(tfg_product_code_arr[tool_index]==TFG_DEVICE_ID_TFG15):
  sync()
  tfg_timeout=tfg_timeout+1
  if(tfg_timeout>ON_INIT_TIMEOUT):
  popup(tfg_device_id_timeout,tfg_error_title,error=True,blocking=False)
  halt
  end 
  end 
  if ON_DEBUG_LOG:
  textmsg("Identified TFG: ",tfg_product_code_arr[tool_index])
  end 
  end 
  tfg_dataRead_running=True
  sync()
  tfg_dataRead_thrd=run tfg_dataRead_thread()
  sync()
  textmsg(tfg_device_id_waiting)
  if(tfg_index==ON_DI_DUAL):
  tfg_wait_for_init(ON_DI_PRIMARY)
  tfg_wait_for_init(ON_DI_SECONDARY)
  else:
  tfg_wait_for_init(tfg_index)
  end 
  sync()
  tfg_dataProcess_running=True
  sync()
  tfg_dataProcess_thrd=run tfg_dataProcess_thread()
  sync()
  tfg_monitor_thread_handle=run tfg_monitor_thread()
  sync()
  
  #======    End of OnRobot TFG Run    ======#
  def myProgram():
  end

  myProgram()
end

# sec test():
#  esempio_script_mr()
# end
esempio_script_mr()

